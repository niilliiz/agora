import styles from "./timer.module.css";
import { useTimer } from "react-timer-hook";
import { useState } from "react";

const endTime = 1722849567436;

const Limited_Second = 300;

function formatTime(value) {
  return value.toString().padStart(2, "0");
}

export default function Timer({ className = "", autoStart, remoteData = "" }) {
  const [isExpanded, setIsExpanded] = useState(false);

  function handleEndTimer() {
    // todo
    // todo: if is doctor => show end session modal
    console.log("timer ended, what am i suppose to do?");
  }
  const { seconds, minutes, hours, days } = useTimer({
    expiryTimestamp: endTime,
    autoStart: autoStart,
    onExpire: () => handleEndTimer(),
  });

  function handleExpand() {
    setIsExpanded(prevIsExpanded => !prevIsExpanded);
  }

  const remainingTimeInSeconds = days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds;

  const timeElement = (
    <div className={styles.timeElementWrapper}>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
      >
        <path
          d="M10 3.125C8.51664 3.125 7.0666 3.56487 5.83323 4.38898C4.59986 5.21309 3.63856 6.38443 3.07091 7.75487C2.50325 9.12532 2.35472 10.6333 2.64411 12.0882C2.9335 13.543 3.64781 14.8794 4.6967 15.9283C5.7456 16.9772 7.08197 17.6915 8.53683 17.9809C9.99168 18.2703 11.4997 18.1218 12.8701 17.5541C14.2406 16.9864 15.4119 16.0251 16.236 14.7918C17.0601 13.5584 17.5 12.1084 17.5 10.625C17.4977 8.63657 16.7068 6.73024 15.3008 5.32421C13.8948 3.91818 11.9884 3.12727 10 3.125ZM10 16.875C8.76387 16.875 7.5555 16.5084 6.52769 15.8217C5.49988 15.1349 4.6988 14.1588 4.22576 13.0168C3.75271 11.8747 3.62894 10.6181 3.8701 9.40569C4.11125 8.1933 4.70651 7.07966 5.58059 6.20558C6.45466 5.3315 7.56831 4.73625 8.78069 4.49509C9.99307 4.25393 11.2497 4.37771 12.3918 4.85075C13.5338 5.3238 14.5099 6.12488 15.1967 7.15269C15.8834 8.18049 16.25 9.38887 16.25 10.625C16.2481 12.282 15.5891 13.8707 14.4174 15.0424C13.2457 16.2141 11.657 16.8731 10 16.875ZM13.5672 7.05781C13.6253 7.11586 13.6714 7.18479 13.7029 7.26066C13.7343 7.33654 13.7505 7.41787 13.7505 7.5C13.7505 7.58213 13.7343 7.66346 13.7029 7.73934C13.6714 7.81521 13.6253 7.88414 13.5672 7.94219L10.4422 11.0672C10.3841 11.1253 10.3152 11.1713 10.2393 11.2027C10.1634 11.2342 10.0821 11.2503 10 11.2503C9.91788 11.2503 9.83656 11.2342 9.76069 11.2027C9.68482 11.1713 9.61588 11.1253 9.55782 11.0672C9.49975 11.0091 9.45368 10.9402 9.42226 10.8643C9.39083 10.7884 9.37466 10.7071 9.37466 10.625C9.37466 10.5429 9.39083 10.4616 9.42226 10.3857C9.45368 10.3098 9.49975 10.2409 9.55782 10.1828L12.6828 7.05781C12.7409 6.9997 12.8098 6.9536 12.8857 6.92215C12.9615 6.8907 13.0429 6.87451 13.125 6.87451C13.2071 6.87451 13.2885 6.8907 13.3643 6.92215C13.4402 6.9536 13.5091 6.9997 13.5672 7.05781ZM7.5 1.25C7.5 1.08424 7.56585 0.925268 7.68306 0.808058C7.80027 0.690848 7.95924 0.625 8.125 0.625H11.875C12.0408 0.625 12.1997 0.690848 12.3169 0.808058C12.4342 0.925268 12.5 1.08424 12.5 1.25C12.5 1.41576 12.4342 1.57473 12.3169 1.69194C12.1997 1.80915 12.0408 1.875 11.875 1.875H8.125C7.95924 1.875 7.80027 1.80915 7.68306 1.69194C7.56585 1.57473 7.5 1.41576 7.5 1.25Z"
          fill="white"
        />
      </svg>
      <span className={styles.timerContent}>
        {hours > 0 && `${formatTime(hours)}:`}
        {formatTime(minutes)}:{formatTime(seconds)}
      </span>
    </div>
  );

  const extraInfo = isExpanded && (
    <span className={styles.extraInfo}>
      Your call will ended automatically after{" "}
      {minutes > 60 ? `${hours} hour` : minutes < 1 ? `${seconds} second` : `${minutes} minute`}
    </span>
  );

  return (
    <div
      className={`${styles.timerContainer} ${remainingTimeInSeconds < Limited_Second ? styles.warningTimer : ""} ${isExpanded ? styles.expandedContainer : ""} ${className}`}
      onClick={() => handleExpand()}
    >
      <div className={styles.bigScreenTimer}>
        {timeElement}

        {extraInfo}

        <svg
          className={`${styles.expandIcon} ${isExpanded ? styles.rotateX : ""}`}
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
        >
          <path
            d="M14.1925 10.4422L7.94254 16.6922C7.88447 16.7502 7.81553 16.7963 7.73966 16.8277C7.66379 16.8592 7.58247 16.8753 7.50035 16.8753C7.41823 16.8753 7.33691 16.8592 7.26104 16.8277C7.18517 16.7963 7.11623 16.7502 7.05816 16.6922C7.00009 16.6341 6.95403 16.5652 6.9226 16.4893C6.89117 16.4134 6.875 16.3321 6.875 16.25C6.875 16.1679 6.89117 16.0865 6.9226 16.0107C6.95403 15.9348 7.00009 15.8659 7.05816 15.8078L12.8668 9.99998L7.05816 4.19217C6.94088 4.07489 6.875 3.91583 6.875 3.74998C6.875 3.58413 6.94088 3.42507 7.05816 3.30779C7.17544 3.19052 7.3345 3.12463 7.50035 3.12463C7.6662 3.12463 7.82526 3.19052 7.94254 3.30779L14.1925 9.55779C14.2506 9.61584 14.2967 9.68477 14.3282 9.76064C14.3597 9.83652 14.3758 9.91785 14.3758 9.99998C14.3758 10.0821 14.3597 10.1634 14.3282 10.2393C14.2967 10.3152 14.2506 10.3841 14.1925 10.4422Z"
            fill="white"
          />
        </svg>
      </div>
      <div className={styles.shortScreenTimer}>
        <div className={styles.row}>
          <div className={styles.timeWrapper}>
            {timeElement}
            {remoteData && <span className={styles.remoteData}>{remoteData}</span>}
          </div>
          <svg
            className={`${styles.expandIcon} ${isExpanded ? styles.rotateY : ""}`}
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="21"
            viewBox="0 0 20 21"
            fill="none"
          >
            <path
              d="M16.6922 8.44217L10.4422 14.6922C10.3841 14.7503 10.3152 14.7964 10.2393 14.8278C10.1635 14.8593 10.0821 14.8755 10 14.8755C9.91786 14.8755 9.83653 14.8593 9.76066 14.8278C9.68478 14.7964 9.61585 14.7503 9.55781 14.6922L3.30781 8.44217C3.19053 8.32489 3.12465 8.16583 3.12465 7.99998C3.12465 7.83413 3.19053 7.67507 3.30781 7.55779C3.42508 7.44052 3.58414 7.37463 3.75 7.37463C3.91585 7.37463 4.07491 7.44052 4.19218 7.55779L10 13.3664L15.8078 7.55779C15.8659 7.49972 15.9348 7.45366 16.0107 7.42224C16.0866 7.39081 16.1679 7.37463 16.25 7.37463C16.3321 7.37463 16.4134 7.39081 16.4893 7.42224C16.5652 7.45366 16.6341 7.49972 16.6922 7.55779C16.7503 7.61586 16.7963 7.6848 16.8277 7.76067C16.8592 7.83654 16.8753 7.91786 16.8753 7.99998C16.8753 8.0821 16.8592 8.16342 16.8277 8.23929C16.7963 8.31516 16.7503 8.3841 16.6922 8.44217Z"
              fill="white"
            />
          </svg>
        </div>
        {extraInfo}
      </div>
    </div>
  );
}
